import { smimeSignReal } from '../src/smime/sign.js';
import { smimeVerifyReal } from '../src/smime/verify.js';

const privateKeyPem = `-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAlQYNyll8FQXKAVe38OD+bi5XwFfVVccxzX2g7WgWsCGvp4n5
w+0Z9KnznthVZ2lUqj7THcDRIPW4iP8jew8w5ZqlX3pZiVpPc75NjHSbHA2N5p8E
ri4S8rqS3Ez5WeiPM8SXIU3rC8JV1jxnmoHO4roNMQB67pWGOsWHMplr7sQIYMya
Ymt+375uMlLv+SKiOFh1mzyfLzeMGuO9WSRyTsowDI5rttlyiT6xhEqUvw3pTOyH
abPQEyCA4aBZKLQtVeo5ERxjZ9kmcbLjhN/S0EY4WOlvYD64eIcrahUPLwWFjbCL
YbmzCmBL81TF5PnHE/lsZjzB/w7Kn1WCQ35SPQIDAQABAoIBACvwNAK0baRZJ51L
ur036WydF1xryUfYSnPXFarJ5N6boAna4ZyF/QApV94+1Ld/0+m6Sk7cegyoxncG
GvT+nqEj/pxvG5Um3oQ22PCPtOgJiwwzWJLunMGahxCTVXXP3uEZlqHIMoQuEVbw
Sm/A1Dn/N0J6bMSJq6EKenlNyQgFq3CtT0yq8jzUSclA7MGYsprJqTYKwgNhG5M3
HEm3DZUXS2vC8pffbTJVkuWrHykJUKx4iauBuRTmGB7qdNlTafcS0nJK2znrUA7x
weRrBr1Gr6sO2cKb6pK8NBhFah/uTgGGVHUHSa3UCnfvR12PmQC9vxhHuSfJ6zVA
XZAaF1UCgYEAxC/pk2sl+H0xffSHe7oaRdXMpg9wMGbwE77z472t30kuzLHvwBVZ
fEr4BYAvzT2pcxzysIonoDmAebgXWtcM4syO9DTj+TJ1dJmRMWb11MLcOWDNKq5J
gJ1OIfSsKJc28V/m+tFNccbHTexHXXR/L0a7GIMcdz/b/breMeP+0hMCgYEAwnUb
QQVdXDRwXdoamaqNGDOyMQg95E6/3AlIsAJplj1HVUUnBNXKkCP7HOcoDnmwU4F6
SAO18DI94hRlbKevfPQnub/4e/OCzWkxA14JpBCZ7fzwceEqm2juaR6V+uKTWIX2
9ERu3mcKfOiLZZfTyZJbfV4nXGMUtpEIbUMBVG8CgYBpWrl6ex3m9YQwebKQFP6q
5geCXeQHeiAO2oqqkF/g+rHxJtTzOAPYJYJPoekJtMVclf0WJPrmpjqCIwQXukin
OubB6e1LE3fT5+v6tanqWcJd5cgH1ZSPRuqAfZ4+JgZRVQj7RI7sPK0nAW3JmBf8
0WUD4tTUjSycc0+DR0a+lQKBgEH/gv9/dZ9MwPJpiuuqofab3RedJ3xsaduhXwU1
3GY8aBB9xu9yLCzduWWm4sZ+8KR25my4rbBXLP+lUoMdKodrSmxVxl0zWaqj0BnH
edgwNj46wdS0ykQyye/tjJO5AK9j0Fw5ObPMHxgjyOPzMtNQFDMpmIxXqHkKImUK
/9GLAoGATGKGnKBUnJDbnVMrq9We+DQEHkl1Zuj5AMBTjnt4yS2dWQCG8D+HY0mN
S4vAhi70fgWGbUon1EuGatx18aPxP650Dl091IcqouyhZXUw6JhnxTFyRIQa65NW
wlHJfd/rLzqPPSRr4ZLdDronqP1Yhc4h+Laqn57Cr2pq9AB1yyM=
-----END RSA PRIVATE KEY-----`;

const certPem = `-----BEGIN CERTIFICATE-----
MIIF9TCCA92gAwIBAgIQSFEc3ss77zrobB/sNBqaITANBgkqhkiG9w0BAQsFADCB
gTELMAkGA1UEBhMCSVQxEDAOBgNVBAgMB0JlcmdhbW8xGTAXBgNVBAcMEFBvbnRl
IFNhbiBQaWV0cm8xFzAVBgNVBAoMDkFjdGFsaXMgUy5wLkEuMSwwKgYDVQQDDCNB
Y3RhbGlzIENsaWVudCBBdXRoZW50aWNhdGlvbiBDQSBHMzAeFw0yNTA1MTMwMjQ0
MjFaFw0yNjA1MTMwMjA1MjFaMCMxITAfBgNVBAMMGG1pdGh1bkBtaWxsaW9uYWly
ZS5lbWFpbDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJUGDcpZfBUF
ygFXt/Dg/m4uV8BX1VXHMc19oO1oFrAhr6eJ+cPtGfSp857YVWdpVKo+0x3A0SD1
uIj/I3sPMOWapV96WYlaT3O+TYx0mxwNjeafBK4uEvK6ktxM+VnojzPElyFN6wvC
VdY8Z5qBzuK6DTEAeu6VhjrFhzKZa+7ECGDMmmJrft++bjJS7/kiojhYdZs8ny83
jBrjvVkkck7KMAyOa7bZcok+sYRKlL8N6Uzsh2mz0BMggOGgWSi0LVXqOREcY2fZ
JnGy44Tf0tBGOFjpb2A+uHiHK2oVDy8FhY2wi2G5swpgS/NUxeT5xxP5bGY8wf8O
yp9VgkN+Uj0CAwEAAaOCAcQwggHAMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAU
vpepqoS/gL8QU30JMvnhLjIbz3cwfgYIKwYBBQUHAQEEcjBwMDsGCCsGAQUFBzAC
hi9odHRwOi8vY2FjZXJ0LmFjdGFsaXMuaXQvY2VydHMvYWN0YWxpcy1hdXRjbGln
MzAxBggrBgEFBQcwAYYlaHR0cDovL29jc3AwOS5hY3RhbGlzLml0L1ZBL0FVVEhD
TC1HMzAjBgNVHREEHDAagRhtaXRodW5AbWlsbGlvbmFpcmUuZW1haWwwUgYDVR0g
BEswSTA8BgYrgR8QAQEwMjAwBggrBgEFBQcCARYkaHR0cHM6Ly93d3cuYWN0YWxp
cy5pdC9hcmVhLWRvd25sb2FkMAkGB2eBDAEFAQEwHQYDVR0lBBYwFAYIKwYBBQUH
AwIGCCsGAQUFBwMEMEgGA1UdHwRBMD8wPaA7oDmGN2h0dHA6Ly9jcmwwOS5hY3Rh
bGlzLml0L1JlcG9zaXRvcnkvQVVUSENMLUczL2dldExhc3RDUkwwHQYDVR0OBBYE
FLUW7EGmKedYQS4bL0Ef4SXY1IMwMA4GA1UdDwEB/wQEAwIFoDANBgkqhkiG9w0B
AQsFAAOCAgEAEgqZBynMph0GcivQhPrjOMmj0QiaT/T0LjdP7jCpjQRvlZUVo+YF
BTbNTH55l1CQQyIAdq41jK7tcimzLcxpV0+jb7JkuII8tczeAQ/ZiVZ+DUO/H5Wb
rWsZy5O8N4eikcNwoSJ9Uo27S7WeTwoZ5S84+d+vv8zejLfoJBLVAkuw7vyrvatp
i1AEZWMDkYQrUlV6XF6njGaQWNFhasQmPwdaSj3XFR1+GAuRqpy7iBU7VylCgWIx
z9rygBoh0O8y6py/Ga+qoV1D3BfSacoQo1g5aRYBFqMjelhqJtda3JelXlEtR4Zj
WuWoKO+J5fU5FE9L9dL/VjWdGJkwItbWyVRhOMq8qs9fqvZOvRrMT/M9T9vSQMMI
mT7Kz9qA9fhZWJtknDr4YkcoRaSBrcLW/p53ETyEQsKWSGah/GlfD9IwDC69ka6j
oN5lPImbBeu8Go8EJ3QcqLkHl8NedaiwEPUkbXUBcQ5QS/gOKNOq1qxTLVvibnGm
RQcU3SzCEC86G/uLqqq2a4/twmc1uNG8nh7WUVw+jRB6FKaA6s21uDXATQR2P3N9
Iy/TwHmOH1L+prTqfFg/Szenwx8i7Pl1HEx50n9olHs4XgMIJpP3bRZ0HCsFbbUI
hFiePRJQAuCbFlwZyd9jibrFY8o+gOAOjBCxAqKYCFFcBW9ARAvvV+k=
-----END CERTIFICATE-----`;

const message = 'This is a secure message from Millionaire.email';

async function run() {
  try {
    const signed = await smimeSignReal(message, privateKeyPem, certPem);
    console.log('üñä Signed:', signed);

    const verified = await smimeVerifyReal(signed, certPem);
    console.log('üîç Verified:', verified);

    if (!verified.valid) throw new Error('‚ùå Signature is invalid');

    console.log('‚úÖ S/MIME real crypto test passed');
  } catch (err) {
    console.error('‚ùå S/MIME test failed:', err);
    process.exit(1); // For CI failure
  }
}

run();
